generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cards {
  card_id              String          @id
  user_id              String
  type                 String
  source_entity_id     String
  source_entity_type   String
  status               String          @default("active_canvas")
  is_favorited         Boolean         @default(false)
  is_synced            Boolean         @default(true)
  created_at           DateTime        @default(now())
  updated_at           DateTime
  background_image_url String?
  
  // User preferences for card display and interaction
  display_order        Int?            // User-controlled ordering for physical cards
  is_selected          Boolean         @default(false) // User selection for physical cards
  custom_title         String?         // User can override entity title
  custom_content       String?         // User can override entity content
  
  users                users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  conversations        conversations[]

  @@index([user_id, status])
  @@index([user_id, display_order])
}

model communities {
  entity_id  String     @id @default(uuid())
  user_id    String
  created_at DateTime   @default(now())
  title      String
  content    String?
  type       String?
  updated_at DateTime?  @db.Timestamp(6)
  status     String     @default("active")
  // V11.0 Cosmos: 3D coordinates for spatial positioning
  position_x Float?
  position_y Float?
  position_z Float?
  users      users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  concepts   concepts[]

  @@index([entity_id])
}

model concepts {
  entity_id              String       @id @default(uuid())
  user_id                String
  type                   String
  community_id           String?
  created_at             DateTime     @default(now())
  merged_into_entity_id String?
  status                 String       @default("active")
  title                  String
  content                String?
  updated_at             DateTime?    @db.Timestamp(6)
  importance_score       Float?
  // V11.0 Cosmos: 3D coordinates for spatial positioning
  position_x Float?
  position_y Float?
  position_z Float?
  communities            communities? @relation(fields: [community_id], references: [entity_id])
  concepts               concepts?    @relation("conceptsToconcepts", fields: [merged_into_entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction)
  other_concepts         concepts[]   @relation("conceptsToconcepts")
  users                  users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([entity_id])
}

model conversation_messages {
  conversation_id String
  media_ids       String[]      @default([])
  content         String
  message_id      String        @id @default(uuid())
  created_at      DateTime      @default(now())
  status          String        @default("active")
  type            String
  metadata        Json?
  conversations   conversations @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade)
}

model conversations {
  user_id                 String
  title                   String?
  created_at              DateTime                @default(now())
  ended_at                DateTime?
  metadata                Json?
  conversation_id         String                  @id @default(uuid())
  importance_score        Float?
  source_card_id          String?
  status                  String                  @default("active")
  session_id              String?
  forward_looking_context Json?
  proactive_greeting      String?
  updated_at              DateTime                @default(now())
  content                 String?
  type                    String?
  conversation_messages   conversation_messages[]
  user_sessions           user_sessions?          @relation(fields: [session_id], references: [session_id])
  cards                   cards?                  @relation(fields: [source_card_id], references: [card_id])
  users                   users                   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  memory_units            memory_units[]

  @@index([user_id, status])
  @@index([session_id])
  @@index([user_id, updated_at(sort: Desc)])
  @@index([status, updated_at(sort: Desc)])
}

model derived_artifacts {
  entity_id              String    @id @default(uuid())
  user_id                String
  title                  String
  created_at             DateTime  @default(now())
  source_concept_ids     String[]
  source_memory_unit_ids String[]
  cycle_id               String?
  content                String?
  type                   String
  updated_at             DateTime? @db.Timestamp(6)
  status                 String    @default("active")
  // V11.0 Cosmos: 3D coordinates for spatial positioning
  position_x Float?
  position_y Float?
  position_z Float?
  users                  users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, cycle_id])
  @@index([entity_id])
}

model growth_events {
  entity_id              String    @id @default(uuid())
  user_id                String
  source                 String
  created_at             DateTime  @default(now())
  delta_value            Decimal   @db.Decimal(3, 1)
  title                  String?
  content                String
  type                   String?
  updated_at             DateTime? @db.Timestamp(6)
  status                 String    @default("active")
  source_concept_ids     String[]  @default([])
  source_memory_unit_ids String[]  @default([])
  metadata               Json?
  // V11.0 Cosmos: 3D coordinates for spatial positioning
  position_x Float?
  position_y Float?
  position_z Float?
  users                  users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([delta_value])
  @@index([entity_id])
}

model interaction_logs {
  interaction_id     String   @id @default(uuid())
  user_id            String
  target_entity_id   String?
  target_entity_type String?
  content_structured Json?
  metadata           Json?
  created_at         DateTime @default(now())
  content            String?
  type               String
  users              users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model media_items {
  media_id          String        @id
  user_id           String
  memory_unit_id    String?
  type              String
  storage_url       String
  filename          String?
  mime_type         String?
  size_bytes        Int?
  hash              String?       @unique
  processing_status String        @default("pending")
  metadata          Json?
  created_at        DateTime      @default(now())
  memory_units      memory_units? @relation(fields: [memory_unit_id], references: [entity_id])
  users             users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([processing_status])
  @@index([user_id, created_at(sort: Desc)])
  @@index([user_id])
  @@index([user_id, type])
}

model memory_units {
  entity_id              String         @id @default(uuid())
  user_id                String
  title                  String
  content                String
  importance_score       Float?
  sentiment_score        Float?
  source_conversation_id String?
  created_at             DateTime       @default(now())
  updated_at             DateTime?      @db.Timestamp(6)
  status                 String         @default("active")
  type                   String?
  // V11.0 Cosmos: 3D coordinates for spatial positioning
  position_x Float?
  position_y Float?
  position_z Float?
  media_items            media_items[]
  conversations          conversations? @relation(fields: [source_conversation_id], references: [conversation_id])
  users                  users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([entity_id])
}

model proactive_prompts {
  entity_id  String    @id @default(uuid())
  user_id    String
  status     String    @default("pending")
  created_at DateTime  @default(now())
  metadata   Json?
  cycle_id   String?
  content    String
  type       String
  updated_at DateTime? @db.Timestamp(6)
  // V11.0 Cosmos: 3D coordinates for spatial positioning
  position_x Float?
  position_y Float?
  position_z Float?
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, cycle_id])
  @@index([entity_id])
}

model user_challenges {
  user_challenge_id     String    @id
  user_id               String
  challenge_template_id String
  status                String    @default("active")
  start_time            DateTime  @default(now())
  completion_time       DateTime?
  progress_data         Json?
  users                 users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_cycles {
  cycle_id     String    @id @default(uuid())
  user_id      String
  created_at   DateTime  @default(now())
  completed_at DateTime?
  status       String    @default("pending")
  type         String
  ended_at     DateTime? @db.Timestamp(6)
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([status])
}

model user_graph_projections {
  projection_id   String   @id
  user_id         String
  status          String   @default("completed")
  created_at      DateTime @default(now())
  metadata        Json?
  updated_at      DateTime @updatedAt
  // V11.0 Cosmos: Hybrid UMAP + Linear Transformation matrix storage
  transformation_matrix Json? // 4x4 transformation matrix for linear positioning
  umap_parameters Json?       // UMAP parameters used for this projection
  // V11.0 Cosmos: UMAP Transform support
  fitted_umap_model Bytes?    // Serialized UMAP model for transform operations
  model_metadata    Json?     // Model size, training info, etc.
  projection_method String?   // 'linear_transform' | 'umap_transform' | 'umap_learning'
  users           users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, created_at(sort: Desc)])
}

model user_sessions {
  session_id     String          @id
  user_id        String
  created_at     DateTime        @default(now())
  expires_at     DateTime?
  last_active_at DateTime
  conversations  conversations[]
  users          users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model llm_interactions {
  interaction_id       String   @id @default(uuid())
  worker_type          String
  worker_job_id        String?
  session_id           String?
  user_id              String
  conversation_id      String?
  message_id           String?
  source_entity_id     String?
  model_name           String
  temperature          Decimal? @db.Decimal(3, 2)
  max_tokens           Int?
  prompt_length        Int
  prompt_tokens        Int?
  system_prompt        String?
  user_prompt          String
  full_prompt          String
  response_length      Int
  response_tokens      Int?
  raw_response         String
  parsed_response      Json?
  finish_reason        String?
  request_started_at   DateTime
  request_completed_at DateTime
  processing_time_ms   Int
  status               String
  error_message        String?
  error_code           String?
  metadata             Json?
  created_at           DateTime @default(now())
  users                users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@index([worker_type])
  @@index([created_at])
  @@index([conversation_id])
  @@index([status])
}

model users {
  user_id                           String                   @id
  email                             String                   @unique
  hashed_password                   String?
  name                              String?
  preferences                       Json?
  region                            String                   @default("us")
  timezone                          String?                  @default("UTC")
  language_preference               String?                  @default("en")
  profile_picture_url               String?
  created_at                        DateTime                 @default(now())
  last_active_at                    DateTime?
  account_status                    String                   @default("active")
  concepts_created_in_cycle         Int                      @default(0)
  last_cycle_started_at             DateTime?
  memory_profile                    String?
  next_conversation_context_package Json?
  key_phrases                       Json?
  cards                             cards[]
  communities                       communities[]
  concepts                          concepts[]
  conversations                     conversations[]
  derived_artifacts                 derived_artifacts[]
  growth_events                     growth_events[]
  interaction_logs                  interaction_logs[]
  llm_interactions                  llm_interactions[]
  media_items                       media_items[]
  memory_units                      memory_units[]
  proactive_prompts                 proactive_prompts[]
  user_challenges                   user_challenges[]
  user_cycles                       user_cycles[]
  user_graph_projections            user_graph_projections[]
  user_sessions                     user_sessions[]
}
