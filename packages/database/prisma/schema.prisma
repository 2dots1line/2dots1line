// packages/database/prisma/schema.prisma
// Target V7 Schema - UPDATED with CycleReport and Agent Pipeline changes

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  output        = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE USER & AUTHENTICATION ---
model User {
  user_id             String    @id @default(uuid())
  email               String    @unique
  hashed_password     String?
  name                String?
  preferences         Json?
  region              String    @default("us")
  timezone            String?   @default("UTC")
  language_preference String?   @default("en")
  profile_picture_url String?   @map("profile_picture_url")
  created_at          DateTime  @default(now())
  last_active_at      DateTime? @updatedAt
  account_status      String    @default("active")
  growth_profile      Json?

  // Relations
  sessions                UserSession[]
  memory_units            MemoryUnit[]
  concepts                Concept[]
  media                   Media[]
  annotations             Annotation[]
  communities             Community[]
  conversations           Conversation[]
  conversation_messages   ConversationMessage[] @relation("MessageSender")
  derived_artifacts       DerivedArtifact[]
  growth_events           growth_events[]       @relation("UserGrowthEvents")
  reflections             Reflection[]
  orb_states_log          OrbState[]
  user_challenges         UserChallenge[]
  chunks                  Chunk[]
  cycle_reports           CycleReport[] // Relation to historical cycle reports

  @@map("users")
  @@index([email])
  @@index([region])
}

model UserSession {
  session_id     String   @id @default(uuid())
  user_id        String
  user           User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  device_info    Json?
  ip_address     String?
  user_agent     String?
  created_at     DateTime @default(now())
  expires_at     DateTime
  last_active_at DateTime @updatedAt

  @@index([user_id])
  @@index([expires_at])
  @@map("user_sessions")
}

// --- MEMORY & CONTENT MANAGEMENT ---
model MemoryUnit {
  muid                       String    @id @default(uuid())
  user_id                    String
  user                       User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  source_type                String
  title                      String?
  content                    String?
  content_type               String    @default("text")
  original_content           String?
  content_source             String    @default("processed")
  content_processing_notes   Json?
  creation_ts                DateTime
  ingestion_ts               DateTime  @default(now())
  last_modified_ts           DateTime  @updatedAt
  processing_status          String    @default("raw")
  importance_score           Float?
  is_private                 Boolean   @default(true)
  tier                       Int       @default(1)
  metadata                   Json?

  chunks                     Chunk[]
  media_links                Media[]
  derived_artifacts_as_source DerivedArtifact[] @relation("DerivedArtifactSourceMemoryUnit")
  reflections                Reflection[]
  ConversationMessage        ConversationMessage[] @relation("MessageToMemoryUnitLink")

  @@map("memory_units")
  @@index([user_id, creation_ts(sort: Desc)])
  @@index([user_id, processing_status])
  @@index([user_id, source_type])
  @@index([user_id, importance_score])
}

model Chunk {
  cid                  String    @id @default(uuid())
  muid                 String
  memory_unit          MemoryUnit @relation(fields: [muid], references: [muid], onDelete: Cascade)
  user_id              String
  user                 User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  text_content         String    @map("text")
  sequence_order       Int
  role                 String?
  embedding_id         String?
  char_count           Int?
  token_count          Int?
  embedding_model      String?
  embedding_created_at DateTime?
  metadata             Json?

  @@map("chunks")
  @@index([muid, sequence_order])
  @@index([user_id])
  @@index([embedding_id])
}

// --- CONCEPT & SEMANTIC MANAGEMENT ---
model Concept {
  concept_id      String    @id @default(uuid())
  user_id         String
  user            User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  name            String
  type            String
  source          String    @default("UNKNOWN") // USER_GENERATED, AI_SUGGESTED
  description     String?
  user_defined    Boolean   @default(false)
  confidence      Float?
  community_id    String?
  community       Community? @relation(fields: [community_id], references: [community_id], onDelete: SetNull)
  embedding_id    String?
  ontology_version String?
  created_at      DateTime  @default(now())
  last_updated_ts DateTime  @updatedAt
  metadata        Json?

  derived_artifact_links DerivedArtifactConceptLink[]
  annotation_links       AnnotationConceptLink[]

  @@map("concepts")
  @@unique([user_id, name, type])
  @@index([user_id, type])
  @@index([user_id, name])
  @@index([community_id])
}

model Community {
  community_id     String    @id @default(uuid())
  user_id          String
  user             User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  name             String?
  description      String?
  detection_method String?
  confidence_score Float?
  keywords         String[]  @default([])
  created_at       DateTime  @default(now())
  last_analyzed_ts DateTime?

  concepts         Concept[]

  @@map("communities")
  @@index([user_id])
}

// --- MEDIA & ANNOTATION MANAGEMENT ---
model Media {
  id                String      @id @default(uuid())
  muid              String?
  memory_unit       MemoryUnit? @relation(fields: [muid], references: [muid], onDelete: SetNull)
  user_id           String
  user              User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  type              String
  storage_url       String
  original_name     String?
  mime_type         String?
  file_size_bytes   Int?
  hash_value        String?     @unique
  caption           String?
  extracted_text    String?
  processing_status String      @default("pending")
  embedding_id      String?
  metadata          Json?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  @@map("media")
  @@index([muid])
  @@index([user_id])
  @@index([user_id, type])
  @@index([user_id, hash_value])
}

model Annotation {
  aid                String   @id @default(uuid())
  user_id            String
  user               User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  target_id          String
  target_node_type   String
  annotation_type    String
  text_content       String
  source             String
  created_at         DateTime @default(now())
  last_modified_ts   DateTime @updatedAt
  metadata           Json?

  concept_links      AnnotationConceptLink[]

  @@map("annotations")
  @@index([user_id, target_id, target_node_type])
  @@index([user_id, annotation_type])
  @@index([source])
}

// --- AI-GENERATED ARTIFACTS & GAMIFICATION ---
model DerivedArtifact {
  artifact_id                 String      @id @default(uuid())
  user_id                     String
  user                        User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  artifact_type               String
  title                       String?
  content_json                Json
  user_feedback_score         Int?
  user_feedback_comment       String?
  generated_by_agent          String?
  agent_version               String?
  generation_parameters       Json?
  source_memory_unit_id       String?
  source_memory_unit          MemoryUnit? @relation("DerivedArtifactSourceMemoryUnit", fields: [source_memory_unit_id], references: [muid], onDelete: SetNull)
  created_at                  DateTime    @default(now())
  updated_at                  DateTime    @updatedAt

  linked_concepts             DerivedArtifactConceptLink[]

  @@map("derived_artifacts")
  @@index([user_id, artifact_type])
  @@index([user_id, created_at(sort: Desc)])
  @@index([source_memory_unit_id])
}

model DerivedArtifactConceptLink {
  id                  String            @id @default(uuid())
  derived_artifact_id String
  derived_artifact    DerivedArtifact @relation(fields: [derived_artifact_id], references: [artifact_id], onDelete: Cascade)
  concept_id          String
  concept             Concept         @relation(fields: [concept_id], references: [concept_id], onDelete: Cascade)
  created_at          DateTime          @default(now())
  @@map("derived_artifact_concept_links")
}

model AnnotationConceptLink {
  id                  String     @id @default(uuid())
  annotation_id       String
  annotation          Annotation @relation(fields: [annotation_id], references: [aid], onDelete: Cascade)
  concept_id          String
  concept             Concept    @relation(fields: [concept_id], references: [concept_id], onDelete: Cascade)
  created_at          DateTime   @default(now())
  @@map("annotation_concept_links")
}

// --- GAMIFICATION & LEARNING ---
model ChallengeTemplate {
  challenge_id       String    @id @default(uuid())
  title              String
  description        String
  category           String
  difficulty         Int
  related_concepts   String[]  @default([])
  reward_points      Int
  repeatable_schedule String?
  is_active          Boolean   @default(true)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  user_challenges UserChallenge[]

  @@map("challenge_templates")
}

model UserChallenge {
  user_challenge_id String            @id @default(uuid())
  user_id           String
  user              User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  challenge_id      String
  challenge         ChallengeTemplate @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade)
  status            String            @default("not_started") // e.g., 'not_started', 'in_progress', 'completed'
  started_at        DateTime?
  completed_at      DateTime?
  user_notes        Json?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt

  @@map("user_challenges")
  @@index([user_id, status])
}

// --- CONVERSATION MANAGEMENT ---
model Conversation {
  id                      String   @id @default(uuid())
  user_id                 String
  user                    User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  title                   String?
  start_time              DateTime @default(now())
  end_time                DateTime?
  status                  String   @default("active") // active, processed, archived
  summary                 String?
  context_package         Json? // Stores the initial context package (user profile, etc.)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  messages ConversationMessage[]

  @@map("conversations")
  @@index([user_id, start_time(sort: Desc)])
}

model ConversationMessage {
  id                String       @id @default(uuid())
  conversation_id   String
  conversation      Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user_id           String
  sender            User         @relation("MessageSender", fields: [user_id], references: [user_id], onDelete: Cascade)
  role              String // 'user', 'assistant'
  content           String?
  media_id          String?
  timestamp         DateTime     @default(now())
  metadata          Json?
  memory_unit_links MemoryUnit[] @relation("MessageToMemoryUnitLink")

  @@map("conversation_messages")
  @@index([conversation_id])
}

// --- GROWTH & REFLECTION ---
model growth_events {
  geid             String    @id @default(uuid())
  user_id          String
  user             User      @relation("UserGrowthEvents", fields: [user_id], references: [user_id], onDelete: Cascade)
  growth_dimension String
  change_delta     Float
  source_type      String
  source_id        String
  description      String?
  occurred_at      DateTime
  created_at       DateTime  @default(now())
  metadata         Json?

  @@map("growth_events")
  @@index([user_id, occurred_at(sort: Desc)])
  @@index([user_id, growth_dimension])
}

model Reflection {
  reflection_id  String     @id @default(uuid())
  user_id        String
  user           User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  title          String?
  content        String
  related_muid   String?
  related_memory MemoryUnit? @relation(fields: [related_muid], references: [muid], onDelete: SetNull)
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  @@map("reflections")
  @@index([user_id, created_at(sort: Desc)])
}

model OrbState {
  id           String   @id @default(uuid())
  user_id      String
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  state_name   String
  parameters   Json?
  timestamp    DateTime @default(now())
  source_event String?

  @@map("orb_states")
  @@index([user_id, timestamp(sort: Desc)])
}

// --- NEW: CYCLE REPORTING ---
model CycleReport {
  report_id             String   @id @default(uuid())
  user_id               String
  user                  User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  created_at            DateTime @default(now())
  cycle_start_date      DateTime
  cycle_end_date        DateTime
  user_facing_summary   String   @db.Text // The prose summary for the user
  agent_facing_profile  Json     // The detailed userMemoryProfile for the DialogueAgent
  metadata              Json?

  @@map("cycle_reports")
  @@index([user_id, created_at(sort: Desc)])
}