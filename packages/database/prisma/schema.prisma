generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cards {
  card_id              String          @id
  user_id              String
  type                 String
  source_entity_id     String
  source_entity_type   String
  status               String          @default("active_canvas")
  is_favorited         Boolean         @default(false)
  display_data         Json?
  is_synced            Boolean         @default(true)
  created_at           DateTime        @default(now())
  updated_at           DateTime
  background_image_url String?
  users                users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  conversations        conversations[]

  @@index([user_id, status])
}

model communities {
  entity_id  String     @id @default(uuid())  // 1. Primary Key
  user_id    String                           // 2. User Reference
  title      String                           // 3. Core Content
  content    String?                          // 3. Core Content
  type       String?                          // 4. Classification
  status     String     @default("active")    // 4. Classification
  created_at DateTime   @default(now())       // 9. Timestamps
  updated_at DateTime?  @db.Timestamp(6)      // 9. Timestamps (nullable)
  users      users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  concepts   concepts[]
}

model concepts {
  entity_id              String       @id @default(uuid())  // 1. Primary Key
  user_id                String                              // 2. User Reference
  title                  String                              // 3. Core Content
  content                String?                             // 3. Core Content
  type                   String                              // 4. Classification
  status                 String       @default("active")     // 4. Classification
  importance_score       Float?                              // 5. Scores & Metrics
  community_id           String?                             // 6. Relationships
  merged_into_concept_id String?                             // 6. Relationships
  created_at             DateTime     @default(now())        // 9. Timestamps
  updated_at             DateTime?    @db.Timestamp(6)       // 9. Timestamps (nullable)
  communities            communities? @relation(fields: [community_id], references: [entity_id])
  concepts               concepts?    @relation("conceptsToconcepts", fields: [merged_into_concept_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction)
  other_concepts         concepts[]   @relation("conceptsToconcepts")
  users                  users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model conversation_messages {
  message_id      String        @id @default(uuid())  // 1. Primary Key
  conversation_id String                                // 2. User Reference (via conversation)
  content         String                                // 3. Core Content
  type            String                                // 4. Classification (role: user/assistant/system)
  status          String        @default("active")     // 4. Classification
  media_ids       String[]      @default([])           // 7. Arrays & Complex Data
  metadata        Json?                                // 8. Metadata (standardized)
  created_at      DateTime      @default(now())        // 9. Timestamps
  conversations   conversations @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade)
}

model conversations {
  conversation_id         String                  @id @default(uuid())  // 1. Primary Key
  user_id                 String                                        // 2. User Reference
  title                   String?                                      // 3. Core Content
  content                 String?                                      // 3. Core Content
  type                    String?                                      // 4. Classification
  status                  String                  @default("active")    // 4. Classification
  importance_score        Float?                                       // 5. Scores & Metrics
  source_card_id          String?                                      // 6. Relationships
  session_id              String?                                      // 6. Relationships
  proactive_greeting      String?                                      // 8. Metadata
  forward_looking_context Json?                                        // 8. Metadata
  metadata                Json?                                        // 8. Metadata
  created_at              DateTime                @default(now())       // 9. Timestamps
  ended_at                DateTime?                                    // 9. Timestamps
  updated_at              DateTime                @default(now())       // 9. Timestamps
  conversation_messages   conversation_messages[]
  user_sessions           user_sessions?          @relation(fields: [session_id], references: [session_id])
  cards                   cards?                  @relation(fields: [source_card_id], references: [card_id])
  users                   users                   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  memory_units            memory_units[]

  @@index([user_id, status])
  @@index([session_id])
  @@index([user_id, updated_at(sort: Desc)])
  @@index([status, updated_at(sort: Desc)])
}

model derived_artifacts {
  entity_id              String    @id @default(uuid())  // 1. Primary Key
  user_id                String                          // 2. User Reference
  title                  String                          // 3. Core Content
  content                String?                         // 3. Core Content
  type                   String                          // 4. Classification
  status                 String    @default("active")    // 4. Classification
  cycle_id               String?                         // 6. Relationships
  source_concept_ids     String[]                        // 7. Arrays & Complex Data
  source_memory_unit_ids String[]                        // 7. Arrays & Complex Data
  created_at             DateTime  @default(now())       // 9. Timestamps
  updated_at             DateTime? @db.Timestamp(6)       // 9. Timestamps (nullable)
  users                  users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, cycle_id])
}

model growth_events {
  entity_id              String    @id @default(uuid())  // 1. Primary Key
  user_id                String                          // 2. User Reference
  title                  String?                         // 3. Core Content (generated by IngestionAnalyst)
  content                String                          // 3. Core Content
  type                   String?                         // 4. Classification (from dimension_key)
  status                 String    @default("active")    // 4. Classification
  delta_value            Decimal   @db.Decimal(3, 1)     // 5. Scores & Metrics
  source_concept_ids     String[]  @default([])          // 7. Arrays & Complex Data (standardized)
  source_memory_unit_ids String[]  @default([])          // 7. Arrays & Complex Data (standardized)
  source                 String                          // 8. Metadata
  metadata               Json?                           // 8. Metadata (standardized)
  created_at             DateTime  @default(now())       // 9. Timestamps
  updated_at             DateTime? @db.Timestamp(6)      // 9. Timestamps (nullable)
  users                  users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([delta_value])
}

model interaction_logs {
  interaction_id     String   @id @default(uuid())  // 1. Primary Key
  user_id            String                         // 2. User Reference
  content            String?                        // 3. Core Content
  type               String                         // 4. Classification
  target_entity_id   String?                        // 6. Relationships
  target_entity_type String?                        // 6. Relationships
  content_structured Json?                          // 8. Metadata
  metadata           Json?                          // 8. Metadata
  created_at         DateTime @default(now())       // 9. Timestamps
  users              users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model media_items {
  media_id          String        @id
  user_id           String
  memory_unit_id    String?
  type              String
  storage_url       String
  filename          String?
  mime_type         String?
  size_bytes        Int?
  hash              String?       @unique
  processing_status String        @default("pending")
  metadata          Json?
  created_at        DateTime      @default(now())
  memory_units      memory_units? @relation(fields: [memory_unit_id], references: [entity_id])
  users             users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([processing_status])
  @@index([user_id, created_at(sort: Desc)])
  @@index([user_id])
  @@index([user_id, type])
}

model memory_units {
  entity_id              String         @id @default(uuid())  // 1. Primary Key
  user_id                String                                // 2. User Reference
  title                  String                                // 3. Core Content
  content                String                                // 3. Core Content
  type                   String?                               // 4. Classification
  status                 String         @default("active")     // 4. Classification
  importance_score       Float?                                // 5. Scores & Metrics
  sentiment_score        Float?                                // 5. Scores & Metrics
  source_conversation_id String?                               // 6. Relationships
  created_at             DateTime       @default(now())        // 9. Timestamps
  updated_at             DateTime?      @db.Timestamp(6)       // 9. Timestamps (nullable)
  media_items            media_items[]
  conversations          conversations? @relation(fields: [source_conversation_id], references: [conversation_id])
  users                  users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model proactive_prompts {
  entity_id  String    @id @default(uuid())  // 1. Primary Key
  user_id    String                          // 2. User Reference
  content    String                          // 3. Core Content
  type       String                          // 4. Classification
  status     String    @default("pending")   // 4. Classification
  cycle_id   String?                         // 6. Relationships
  metadata   Json?                           // 8. Metadata
  created_at DateTime  @default(now())       // 9. Timestamps
  updated_at DateTime? @db.Timestamp(6)      // 9. Timestamps (nullable)
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, cycle_id])
}

model user_challenges {
  user_challenge_id     String    @id
  user_id               String
  challenge_template_id String
  status                String    @default("active")
  start_time            DateTime  @default(now())
  completion_time       DateTime?
  progress_data         Json?
  users                 users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model user_cycles {
  cycle_id              String    @id @default(uuid())  // 1. Primary Key
  user_id               String                          // 2. User Reference
  type                  String                          // 4. Classification
  status                String    @default("pending")   // 4. Classification
  created_at            DateTime  @default(now())       // 9. Timestamps
  ended_at              DateTime? @db.Timestamp(6)      // 9. Timestamps
  completed_at          DateTime?                       // 9. Timestamps
  users                 users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([status])
}

model user_graph_projections {
  projection_id   String   @id
  user_id         String
  status          String   @default("completed")
  projection_data Json
  created_at      DateTime @default(now())
  metadata        Json?
  updated_at      DateTime @updatedAt
  users           users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, created_at(sort: Desc)])
}

model user_sessions {
  session_id     String          @id
  user_id        String
  created_at     DateTime        @default(now())
  expires_at     DateTime?
  last_active_at DateTime
  conversations  conversations[]
  users          users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model llm_interactions {
  interaction_id       String   @id @default(uuid())
  worker_type          String
  worker_job_id        String?
  session_id           String?
  user_id              String
  conversation_id      String?
  message_id           String?
  source_entity_id     String?
  model_name           String
  temperature          Decimal? @db.Decimal(3, 2)
  max_tokens           Int?
  prompt_length        Int
  prompt_tokens        Int?
  system_prompt        String?
  user_prompt          String
  full_prompt          String
  response_length      Int
  response_tokens      Int?
  raw_response         String
  parsed_response      Json?
  finish_reason        String?
  request_started_at   DateTime
  request_completed_at DateTime
  processing_time_ms   Int
  status               String
  error_message        String?
  error_code           String?
  metadata             Json?
  created_at           DateTime @default(now())
  users                users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@index([worker_type])
  @@index([created_at])
  @@index([conversation_id])
  @@index([status])
}

model users {
  user_id                           String                   @id
  email                             String                   @unique
  hashed_password                   String?
  name                              String?
  preferences                       Json?
  region                            String                   @default("us")
  timezone                          String?                  @default("UTC")
  language_preference               String?                  @default("en")
  profile_picture_url               String?
  created_at                        DateTime                 @default(now())
  last_active_at                    DateTime?
  account_status                    String                   @default("active")
  concepts_created_in_cycle         Int                      @default(0)
  last_cycle_started_at             DateTime?
  memory_profile                    Json?
  next_conversation_context_package Json?
  key_phrases                       Json?
  cards                             cards[]
  communities                       communities[]
  concepts                          concepts[]
  conversations                     conversations[]
  derived_artifacts                 derived_artifacts[]
  growth_events                     growth_events[]
  interaction_logs                  interaction_logs[]
  llm_interactions                  llm_interactions[]
  media_items                       media_items[]
  memory_units                      memory_units[]
  proactive_prompts                 proactive_prompts[]
  user_challenges                   user_challenges[]
  user_cycles                       user_cycles[]
  user_graph_projections            user_graph_projections[]
  user_sessions                     user_sessions[]
}
