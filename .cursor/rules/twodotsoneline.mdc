---
description: 
globs: 
alwaysApply: true
---
**2dots1line V9.5 - Cursor Project Rules & Guidelines**

### **I. General Principles & Communication**

1.  **Primary Source of Truth:** All development **MUST** adhere to the set of V9.5 specification documents located in `/DevLog/V9.5/` . In case of conflict, the spec documents supersede any previous instructions.
2.  **Clarity in Prompts:** When requesting code generation, provide clear prompts including:
    *   The full file path(s) to be modified (from monorepo root).
    *   The specific V9.5 spec document and section detailing the requirement (e.g., "`2.1_V9.6_DialogueAgent...` Section 2").
    *   Expected inputs and outputs for functions/components.
3.  **Incremental Commits:** Make small, logical commits with clear messages referencing the relevant task ID (e.g., `feat(W2-T3): Implement DialogueAgent retrieval sub-workflow`).
4.  **Clarify Ambiguity:** If a prompt is ambiguous or conflicts with the V9.6 specifications, you **MUST** state the conflict and ask for clarification before proceeding.
5.  **Adherence to Linters & Formatters:** All generated code **MUST** pass the project's configured ESLint and Prettier checks before being considered complete.
6.  **Mandatory Testing:** All new functionality **MUST** be accompanied by relevant tests (unit, integration, or API tests). Human engineers will guide the creation of E2E tests.
7.  **Documentation:** When implementing or changing a module, update its corresponding `README.md` or add clear JSDoc/TSDoc comments for public APIs and complex logic.

### **II. Code Style & Monorepo Architecture**

8.  **Monorepo Structure:** Strictly adhere to the directory structure defined in `5.1_V9.5_Monorepo_and_Deployment.md`.
    *   `apps/`: User-facing frontends and the API Gateway.
    *   `services/`: Real-time backend services.
    *   `workers/`: Asynchronous background job processors.
    *   `packages/`: Shared libraries and tools.
    *   `config/`: Centralized, non-code configuration.
9.  **TypeScript First:** All new code **MUST** use TypeScript with strict type checking enabled. Utilize types from `packages/shared-types/` to ensure consistency.
10. **Modularity & Reusability:**
    *   Frontend: Reusable React components belong in `packages/ui-components/`.
    *   Backend: Reusable utility functions belong in `packages/core-utils/`.
    *   Tools: Reusable, specialized tools belong in `packages/tools/`.
11. **Dependency Hierarchy:** Respect the dependency direction: `packages` -> `services`/`workers` -> `apps`. **Circular dependencies between packages are forbidden.**
12. **Naming Conventions:** Use `PascalCase` for classes, types, and interfaces. Use `camelCase` for functions, methods, and variables. Use named exports over default exports.

### **III. Backend Specific Rules**

13. **Agent & Worker Design:**
    *   Each agent/worker (`DialogueAgent`, `IngestionAnalyst`, etc.) **MUST** have a single, clearly defined responsibility as outlined in its respective V9.6 specification document.
    *   Workers (`IngestionAnalyst`, `InsightEngine`, etc.) **MUST** be implemented as stateless processors that consume jobs from a BullMQ queue.
14. **Configuration Management:**
    *   **NEVER** hardcode values. All configuration (API keys, URLs, business logic rules) **MUST** be loaded from the `/config/` directory via the `ConfigService` or from environment variables.
15. **Tooling Architecture:**
    *   Adhere to the "Configurable Composite Tool" architecture defined in `4.1_V9.5_Tooling_Architecture_and_Registry.md`.
    *   `IngestionAnalyst` and `InsightEngine` **MUST** use composite tools (`HolisticAnalysisTool`, `StrategicSynthesisTool`) built by the `ToolRegistry`.
    *   `DialogueAgent` **MUST** use directly injected atomic and specialized tools (`LLMChatTool`, `HybridRetrievalTool`).
16. **Database Interactions:**
    *   All direct database interactions **MUST** be encapsulated within dedicated Repository classes in `packages/database/src/repositories/`. Agents and services **MUST NOT** contain raw Prisma/Cypher queries.
    *   All PostgreSQL schema changes **MUST** be made via Prisma migrations.
    *   All Neo4j queries **MUST** be parameterized to prevent injection vulnerabilities.
17. **API Endpoint Design (in `apps/api-gateway`):**
    *   Controllers **MUST** be thin. They are responsible for request/response handling, validation, and calling the appropriate backend service.
    *   All API routes **MUST** be versioned under `/api/v1/`.
    *   Rigorously validate all request payloads and parameters using a library like `Zod`.
    *   Return consistent, standardized JSON responses for success and error states.
18. **Asynchronous Operations:**
    *   Use `async/await` for all asynchronous code.
    *   Implement robust `try/catch` blocks for error handling.
    *   For long-running tasks triggered by an API call, return a `202 Accepted` response and use a separate mechanism (e.g., WebSockets, polling) for status updates.

### **IV. Frontend Specific Rules**

19. **Component Design:** Adhere to React best practices (functional components with hooks). Break down complex UI into small, reusable components.
20. **State Management (Zustand):** Organize state into logical, feature-based stores. Use Immer for immutable updates.
21. **3D Scene Development (R3F):** Optimize for performance (instancing, LODs, etc.). Encapsulate scene logic within its respective component. Use shared utilities from `packages/canvas-core/`.
22. **Styling:** Use Tailwind CSS utility classes and design tokens defined in the project's theme configuration. Avoid custom CSS-in-JS or inline styles where possible.
23. **API Calls:** Use TanStack Query (React Query) for all server state management (fetching, caching, mutation).

### **V. AI Task Execution & Completion**

24. **Confirm Scope:** Before starting, confirm your understanding of the task and its relation to the V9.6 specifications.
25. **State File Paths:** When creating or modifying files, always state the full, correct path from the monorepo root as defined in `5.1_V9.5_Monorepo_and_Deployment.md`.
26. **Code Blocks:** Present all generated code in clear, well-formatted markdown code blocks with the language specified (e.g., ```typescript).
27. **Verification:** After generating code, explicitly state how you have tested it (e.g., "I have written a unit test for this function and confirmed it passes") or what manual steps a human should take to verify it.
28. **State Assumptions:** If you must make an assumption due to an ambiguity, state it clearly (e.g., "Assuming the `userId` is available on the request object as `req.user.id`...").

PLEASE NOTE: WE EXCLUSIVELY USE pnpm to build and NOT npm.