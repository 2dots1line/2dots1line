networks:
  2d1l_network: # Respecting the existing network name
    driver: bridge

services:
  # --- 1. CORE DATABASES ---
  postgres:
    image: postgres:16-alpine
    container_name: postgres-2d1l
    ports:
      - "${POSTGRES_HOST_PORT:-5433}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB} # Standardized variable from V11.2 .env
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - 2d1l_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  neo4j:
    image: neo4j:5
    container_name: neo4j-2d1l
    ports:
      - "${NEO4J_HTTP_HOST_PORT:-7474}:7474"
      - "${NEO4J_BOLT_HOST_PORT:-7688}:7687"
    environment:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD}"
    volumes:
      - ./neo4j_data:/data
    networks:
      - 2d1l_network
    restart: unless-stopped

  weaviate:
    image: semitechnologies/weaviate:1.25.3
    container_name: weaviate-2d1l
    ports:
      - "${WEAVIATE_HOST_PORT:-8080}:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: "25"
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      DEFAULT_VECTORIZER_MODULE: "none"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - ./weaviate_data:/var/lib/weaviate
    networks:
      - 2d1l_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis-2d1l
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    command: redis-server --notify-keyspace-events KEA
    volumes:
      - ./redis_data:/data
    networks:
      - 2d1l_network
    restart: unless-stopped

  # --- 2. PYTHON MICROSERVICES ---
  dimension-reducer:
    build:
      context: ./py-services/dimension-reducer
    container_name: dimension-reducer-2d1l
    ports:
      - "${DIMENSION_REDUCER_HOST_PORT:-5001}:5000"
    networks:
      - 2d1l_network
    restart: unless-stopped

  # --- 3. BACKEND SERVICES & WORKERS (NODE.JS) ---
  # All Node.js services use the same root Dockerfile and a consistent env_file pattern.
  
  api-gateway:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: api-gateway } }
    container_name: api-gateway-2d1l
    ports: [ "${API_GATEWAY_HOST_PORT:-3001}:3001" ]
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      dialogue-service:
        condition: service_started
      user-service:
        condition: service_started
      card-service:
        condition: service_started

  dialogue-service:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: dialogue-service } }
    container_name: dialogue-service-2d1l
    ports: [ "${DIALOGUE_SERVICE_HOST_PORT:-3002}:3002" ]
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_started
      weaviate:
        condition: service_started
      redis:
        condition: service_started

  user-service:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: user-service } }
    container_name: user-service-2d1l
    ports: [ "${USER_SERVICE_HOST_PORT:-3003}:3003" ]
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  card-service:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: card-service } }
    container_name: card-service-2d1l
    ports: [ "${CARD_SERVICE_HOST_PORT:-3004}:3004" ]
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  # --- ASYNCHRONOUS WORKERS ---
  conversation-timeout-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: conversation-timeout-worker } }
    container_name: conversation-timeout-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      redis:
        condition: service_started
  
  ingestion-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: ingestion-worker } }
    container_name: ingestion-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_started
      redis:
        condition: service_started
    
  card-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: card-worker } }
    container_name: card-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  embedding-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: embedding-worker } }
    container_name: embedding-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      weaviate:
        condition: service_started
      redis:
        condition: service_started
    
  insight-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: insight-worker } }
    container_name: insight-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_started
      weaviate:
        condition: service_started
      redis:
        condition: service_started

  graph-projection-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: graph-projection-worker } }
    container_name: graph-projection-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_started
      weaviate:
        condition: service_started
      dimension-reducer:
        condition: service_started

  graph-sync-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: graph-sync-worker } }
    container_name: graph-sync-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_started

  maintenance-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: maintenance-worker } }
    container_name: maintenance-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      postgres:
        condition: service_healthy
    
  notification-worker:
    build: { context: ., dockerfile: Dockerfile, args: { APP_NAME: notification-worker } }
    container_name: notification-worker-2d1l
    env_file: .env
    networks: [ 2d1l_network ]
    depends_on:
      redis:
        condition: service_started

volumes:
  postgres_data:
  neo4j_data:
  weaviate_data:
  redis_data: